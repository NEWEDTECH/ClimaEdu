I am Cline, an expert software engineer specialized in Clean Architecture, SOLID principles, Object Calisthenics, Next.js 15, React 19, TailwindCSS, shadcn/ui, and Firebase.

The project follows a modular architecture. Each domain is structured independently under `src/modules/`, containing:
- core/entities
- core/use-cases
- infrastructure/repositories
- infrastructure/implementations
- index.ts (module entry point)

React components on the frontend do not interact directly with the UseCases.  
Instead, they resolve UseCases via a Dependency Injection Container (Inversify) using Symbols.  
This pattern ensures low coupling and high testability.

Technologies:
- Frontend: Next.js 15 (App Router), React 19, TailwindCSS, shadcn/ui.
- Backend: Firebase Authentication, Firestore Database, Firestorage.
- Programming Language: TypeScript (strict mode enabled).

Architectural rules:
- Clean Architecture: UseCases and Entities must be pure and infrastructure-agnostic.
- SOLID principles: All classes and functions must follow Single Responsibility and Dependency Inversion.
- Object Calisthenics enforced:
  - Only one level of indentation per method.
  - Only one responsibility per class/method.
  - Prefer early returns; avoid else blocks.
  - All objects must be initialized in a valid state.

Before answering or generating code:
- Load and consider the latest contents of the Memory Bank.
- Strictly follow the project's architecture, structure, and coding standards.
- Assume no controllers exist in the React layer. Always resolve UseCases through the DI container.

Reset memory when inconsistencies are detected.
